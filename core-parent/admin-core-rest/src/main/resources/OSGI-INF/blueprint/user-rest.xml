<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <reference id="userService" interface="com.kalix.admin.core.api.biz.IUserBeanService"/>

    <camelContext id="userCamel" xmlns="http://camel.apache.org/schema/blueprint">
        <restConfiguration component="servlet" bindingMode="json">
            <dataFormatProperty key="prettyPrint" value="${rest.pretty}"/>
        </restConfiguration>
        <!-- defines the rest services using the context-path /user -->
        <rest path="/users" consumes="application/json;charset=utf-8" produces="application/json">
            <description>user rest service</description>
            <!-- this is a rest GET to find all user -->
            <get id="route-getAllUserbyPage" outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find all Users</description>
                <to uri="bean:userService?method=getAllEntityByQuery(${header.page},${header.limit},${header.jsonStr},${header.sort})"/>
            </get>
            <!-- this is a rest POST to create a user -->
            <post id="route-addUser" type="com.kalix.admin.core.entities.UserBean"
                  outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Create a User</description>
                <to uri="bean:userService?method=saveEntity"/>
            </post>
        </rest>
        <rest path="/users/{id}" consumes="application/json;charset=utf-8" produces="application/json">
            <!-- this is a rest GET to view a user by the given id -->
            <get id="route-getUser" outType="com.kalix.admin.core.entities.UserBean">
                <description>Find User by id</description>
                <to uri="bean:userService?method=getEntity(${header.id})"/>
            </get>

            <!-- this is a rest PUT to update a user -->
            <put  id="route-updateUser" type="com.kalix.admin.core.entities.UserBean"
                  outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Updates a User</description>
                <to uri="bean:userService?method=updateEntity"/>
            </put>
            <!-- this is a rest DELETE to delete a user -->
            <delete  id="route-deleteUser"
                     outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Delete a User</description>
                <to uri="bean:userService?method=deleteEntity(${header.id})"/>
            </delete>
        </rest>
        <rest path="/users/{id}/orgs" consumes="application/json;charset=utf-8" produces="application/json">
            <!-- this is a rest GET to view a user by the given id -->
            <get id="route-getOrgsByUserId" outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find User's Orgs by UserId</description>
                <to uri="bean:orgService?method=getOrgsByUserId(${header.id})"/>
            </get>
        </rest>

        <rest path="/users/{id}/orgs/tree" consumes="application/json;charset=utf-8" produces="application/json">
            <!-- this is a rest GET to view a user by the given id -->
            <get id="route-getOrgsTreeByUserId"  outType="java.util.List">
                <description>Find User's Orgs Tree by UserId</description>
                <to uri="bean:orgService?method=getOrgsTreeByUserId(${header.id})"/>
            </get>
        </rest>

        <!-- 根据用户名获取指定用户的兄弟机构列表 -->
        <rest path="/users/{name}/orgs/brother" consumes="application/json;charset=utf-8" produces="application/json">
            <!-- this is a rest GET to view a user by the given id -->
            <get id="route-getOrgsBrotherByUserName"  outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find User's Orgs Tree by UserId</description>
                <to uri="bean:orgService?method=getOrgsBrotherByUserName(${header.name})"/>
            </get>
        </rest>

        <!-- 获取指定用户id的权限树 -->
        <rest path="/users/{id}/authorizations" consumes="application/json;charset=utf-8" produces="application/json">
            <get id="route-getAuthorizationTreeByUserId">
                <description>Find User's Orgs Tree by UserId</description>
                <to uri="bean:roleService?method=getAuthorizationTreeByUserId(${header.id})"/>
            </get>
        </rest>

        <!-- 检查指定用户id的密码是否正确 -->
        <rest path="/users/{id}/password/{password}" consumes="application/json;charset=utf-8" produces="application/json">
            <get id="route-checkUserPassword" outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Check User's Password by UserId</description>
                <to uri="bean:userService?method=checkUserPassword(${header.id}, ${header.password})"/>
            </get>
        </rest>

        <!-- 查询指定用户id所属机构（包括子机构）下所有用户 -->
        <rest path="/users/{id}/orgs/all/users" consumes="application/json;charset=utf-8" produces="application/json">
            <get id="route-findOrgsUserByUserId" outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find All Organization's User by UserId</description>
                <to uri="bean:userService?method=findOrgsUserByUserId(${header.id})"/>
            </get>
        </rest>

        <!-- 查询指定用户登录名下所有用户 -->
        <rest path="/users/loginname/{loginname}" consumes="application/json;charset=utf-8" produces="application/json">
            <!-- this is a rest GET to view a user by the given loginname -->
            <get id="route-existUserBeanByLoginName">
                <description>Find User by loginname</description>
                <to uri="bean:userService?method=existUserBeanByLoginName(${header.loginname})"/>
            </get>
        </rest>
    </camelContext>
</blueprint>